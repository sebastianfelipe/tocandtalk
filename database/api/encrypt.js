var crypto = require('crypto');

/**
 * Hash a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Returns a self-contained buffer which can be arbitrarily encoded for storage
 * that contains all the data needed to verify a password.
 *
 * @param {!String} password
 * @param {!function(?Error, ?Buffer=)} callback
 */
function hashPassword(password) {
  var hashBytes = 32;
  var saltBytes = 32;
  var iterations = 10000;
  var salt = crypto.randomBytes(saltBytes);

  var hash = crypto.pbkdf2Sync(password, salt.toString('hex'), iterations, hashBytes);
  var pass = {
    hash: hash.toString('hex'),
    salt: salt.toString('hex')
  }
  return pass;
}

/**
 * Verify a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Accepts a hash and salt generated by hashPassword, and returns whether the
 * hash matched the password (as a boolean).
 *
 * @param {!String} password
 * @param {!Buffer} combined Buffer containing hash and salt as generated by
 *   hashPassword.
 * @param {!function(?Error, !boolean)}
 */
function verifyPassword(password, salt, hash) {
  var hashBytes = 32;
  var saltBytes = 32;
  var iterations = 10000;
  // verify the salt and hash against the password
  if (password)
  {
    var verify = crypto.pbkdf2Sync(password, salt, iterations, hashBytes);
    return verify.toString('hex') === hash;
  }
  else
  {
    return false;
  }
}

exports.hashPassword = hashPassword;
exports.verifyPassword = verifyPassword;